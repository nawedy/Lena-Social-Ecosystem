// Video Types
export interface VideoMetadata {
  id: string;
  title: string;
  description: string;
  duration: number;
  thumbnailUrl: string;
  previewGifUrl?: string;
  channelId: string;
  publishedAt: string;
  viewCount: number;
  likes: number;
  dislikes: number;
  monetizationType: 'free' | 'premium' | 'pay_per_view' | 'subscription';
  price?: number;
  tags: string[];
}

export interface Chapter {
  id: string;
  title: string;
  startTime: number;
  endTime?: number;
  thumbnailUrl?: string;
}

export interface Caption {
  id: string;
  language: string;
  url: string;
  label?: string;
  isAutoGenerated: boolean;
}

export interface VideoQuality {
  height: number;
  width: number;
  bitrate: number;
  fps: number;
  label: string;
}

export interface PlaybackState {
  currentTime: number;
  duration: number;
  buffered: number;
  playing: boolean;
  volume: number;
  muted: boolean;
  playbackRate: number;
  quality: string;
  fullscreen: boolean;
  pictureInPicture: boolean;
  theaterMode: boolean;
}

export interface VideoAnalytics {
  videoId: string;
  watchTime: number;
  startTime: number;
  endTime: number;
  interactions: VideoInteraction[];
  qualityChanges: QualityChange[];
  bufferingEvents: BufferingEvent[];
}

export interface VideoInteraction {
  type: 'play' | 'pause' | 'seek' | 'volumeChange' | 'qualityChange' | 'fullscreen' | 'pip';
  timestamp: number;
  value?: any;
}

export interface QualityChange {
  timestamp: number;
  from: string;
  to: string;
  automatic: boolean;
}

export interface BufferingEvent {
  timestamp: number;
  duration: number;
  reason?: string;
}

// Player Events
export type PlayerEventMap = {
  play: void;
  pause: void;
  timeupdate: { currentTime: number; duration: number };
  progress: { buffered: number };
  ended: void;
  volumechange: { volume: number; muted: boolean };
  ratechange: { playbackRate: number };
  qualitychange: { quality: string };
  fullscreenchange: { fullscreen: boolean };
  pipchange: { active: boolean };
  theatermode: { active: boolean };
  error: { code: number; message: string };
};

// Player Controls
export interface PlayerControls {
  play(): Promise<void>;
  pause(): void;
  seek(time: number): void;
  setVolume(volume: number): void;
  setMuted(muted: boolean): void;
  setPlaybackRate(rate: number): void;
  setQuality(quality: string): void;
  requestFullscreen(): Promise<void>;
  exitFullscreen(): Promise<void>;
  requestPictureInPicture(): Promise<void>;
  exitPictureInPicture(): Promise<void>;
  toggleTheaterMode(): void;
}

// Player Options
export interface PlayerOptions {
  autoplay?: boolean;
  muted?: boolean;
  loop?: boolean;
  controls?: boolean;
  preload?: 'none' | 'metadata' | 'auto';
  poster?: string;
  playsinline?: boolean;
  crossOrigin?: 'anonymous' | 'use-credentials';
  volume?: number;
  playbackRate?: number;
  quality?: string;
  startTime?: number;
  chapters?: Chapter[];
  captions?: Caption[];
}

// HLS Configuration
export interface HLSConfig {
  maxBufferLength: number;
  maxMaxBufferLength: number;
  maxBufferSize: number;
  startLevel: number;
  capLevelToPlayerSize: boolean;
  debug: boolean;
} 